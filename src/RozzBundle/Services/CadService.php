<?php
/**
 * Created by PhpStorm.
 * User: Jivko
 * Date: 2.6.2019 г.
 * Time: 12:50
 */

namespace RozzBundle\Services;


use Doctrine\ORM\EntityManager;
use RozzBundle\Entity\Doc;
use RozzBundle\Entity\Kat;
use RozzBundle\Entity\Lands;
use RozzBundle\Entity\Line;
use RozzBundle\Entity\Mest;
use RozzBundle\Entity\Ntp;
use RozzBundle\Entity\Point;
use RozzBundle\Entity\Zem;
use Symfony\Component\Config\Definition\Exception\Exception;

class CadService
{
    /**
     * @var \Camellia_Converter
     */
    private $convertor;
    private $em;
    private $currentBlock;
    private $currentGraphicObjectType;
    private $currentGraphicObject;
    private $currentGraphicObjectsCount;
    private $cadObject;

    private $lineNumber;
    private $lineCount;
    private $errors = array();

    //batch size - create several objects and then flush connection
    const BATCH_SIZE = 1;

    //Graphic objects
    const POINT = "POINT";
    const LINE = "LINE";
    const CONTOUR = "CONTOUR";
    const TEXT = "TEXT";

    //file blocks
    const SKIP = "SKIP";//used to skip blocks, for now is processed only Layer cadaster
    const HEADER = "HEADER";
    const LAYER = "LAYER";
    const CONTROL = "CONTROL";


    //таблици към слой кадастър
//    private $tablePozemImoti;
//    private $tablePrava;
//    private $tablePersons;
//    private $tableSgradi;
//    private $tableAparts;
//    private $tableUlic;
//    private $tableAddres;
//    private $tableMestnosti;
//    private $tableZapovedi;
//    private $tableIzdateli;
//    private $tableHistory;
//    private $tableServituti;
//    private $tableOgrpimo;
//    private $tableDocs;
//    private $tableGorImoti;
//    //таблици към слой гори
//    private $tablePodotdeli;
//    //таблици към слой регулация
//    private $tableRegconturi;
//    private $tablePrimesta;
//    private $tableOtregdane;
//    //таблици към слой почвена категория
//    private $tableKategoria;
//
//    private $tableImotkateg;

    public function __construct(EntityManager $em)
    {
        $this->convertor = new \Camellia_Converter();
        $this->em = $em;
    }

    public function import($filePath)
    {
        //mb_internal_encoding("UTF-8");
        $handle = fopen($filePath, "r");
        if ($handle) {
            $start = microtime(true);

            //set cad object
            $this->cadObject;
            $this->currentGraphicObjectsCount = 0;
            //read cad line by line
            while (($line = fgets($handle)) !== false) {

//                $line = $this->convertor->convert('bulgarian-mik', 'utf-8', $line);
                $this->setCurrentBlock($line);

                //process line by current block
                $this->processLine($line);

            }
            fclose($handle);
            $end = microtime(true);
            dump($end-$start);
            exit;
        } else {
            // error opening the file.
        }
    }

    private function createPoint($line)
    {

    }

    private function createLine($line)
    {
        $this->currentGraphicObjectType = self::LINE;

        if($this->currentGraphicObjectsCount > self::BATCH_SIZE){
            $this->em->flush();
            $this->em->clear();
            $this->currentGraphicObjectsCount = 0;
        }


        $lineArray = explode(' ', $line);

        $this->currentGraphicObject = new Line();
        $this->currentGraphicObject->setType($lineArray[1]);
        $this->currentGraphicObject->setNumber($lineArray[2]);
        $this->currentGraphicObject->setBorderType($lineArray[3]);

        $this->em->persist($this->currentGraphicObject);

        $this->currentGraphicObjectsCount++;
    }

    private function addPointsToLineObject($line)
    {
        $pointsArray = explode(';', $line);

        foreach ($pointsArray as $pointStr){
            $pointArray = explode(' ', $pointStr);

            if(is_array($pointArray) && count($pointArray) === 6){
                $currentPoint = new Point();
                $currentPoint->setNumber($pointArray[0]);
                $currentPoint->setX($pointArray[1]);
                $currentPoint->setY($pointArray[2]);
                $currentPoint->setZ('0');
                $currentPoint->setType($pointArray[3]);
                $currentPoint->setLine($this->currentGraphicObject);

                $this->em->persist($currentPoint);
            }
        }
    }

    private function createContour($line)
    {

    }

    private function processLayerLine($line)
    {
        //empty row
        if (strlen($line)<2 || $this->startsWith($line, 'END')){
            //empty row or end of block
            return false;
        }

        //point
        elseif($this->startsWith($line, 'P ')) {
            //Todo process points
            //set global graphic object to point and process first line of point
            $this->currentGraphicObject = self::POINT;

            return false;
        }

        //line
        elseif ($this->startsWith($line, 'L ')) {
            //set global graphic object to line and process first line of line
            $this->currentGraphicObjectType = self::LINE;

            $rowArray = explode(' ', $line);

            if(count($rowArray) !== 6){
                //todo throw exception
                dump($rowArray);
                $error = "Грешка в ред $this->lineNumber";
                array_push($this->errors, $error);
                return false;
            }else{

                $this->createLine($line);
            }

        }


        //contours
        elseif ($this->startsWith($line,'C ')) {
            //set global graphic object to contour and process first line of contour
            $this->currentGraphicObjectType = self::CONTOUR;



        }

        //texts
        elseif ($this->startsWith($line,'T ')) {
            //Todo: process texts
            $this->currentGraphicObjectType = self::TEXT;
            return false;

        }

        //inner rows
        else {

            //global graphic object is already set, process next line

            //inner line rows
            if($this->currentGraphicObjectType === self::LINE){
                $this->addPointsToLineObject($line);

            }

            //inner contour rows
            elseif ($this->currentGraphicObjectType === self::CONTOUR){

            }

            //inner text rows
            elseif ($this->currentGraphicObjectType === self::TEXT){
                return false;
            }
        }

    }

    private function processControlLine($line)
    {
       //todo implement control block, to add area to contours
    }

    private function processLine($line){
        if($this->currentBlock === self::SKIP){
            return false;
        }

        if($this->currentBlock === self::LAYER){
            $this->processLayerLine($line);

        }elseif ($this->currentBlock == self::CONTROL)
            $this->processControlLine($line);

    }

    private function setCurrentBlock($line)
    {
        //if line starts with HEADER
        if( $this->startsWith($line,self::HEADER)){
            $this->currentBlock = self::HEADER;
        }elseif ( $this->startsWith($line,self::LAYER)){
            $this->currentBlock = self::LAYER;
        }elseif ( $this->startsWith($line,self::CONTROL)){
            $this->currentBlock = self::CONTROL;
        }elseif(
            //exclude all tables
            $this->startsWith($line, 'TABLE')
        ){
            $this->currentBlock = self::SKIP;
        }
    }

    private function contain($line, $string)
    {
        return strpos($line, $string) !== false;
    }

    private function startsWith($line, $string)
    {
        return $line[0] === $string[0]
            ? strncmp($line, $string, strlen($string)) === 0
            : false;
    }


    //LOAD LANDS FROM CAD WITHOUT COORDINATES
    private $EKATTE;
    private $zem;
    private $cadBlock;
    private $landsArr;
    private $areasArr;
    private $mestArr;
    private $docsArr;
    private $izdArr;
    private $pravaArr;

    //cad blocks
    const L_CAD = 'LAYER CADASTER';
    const C_CAD = 'CONTROL CADASTER';
    const L_END = 'END_LAYER';
    const C_END = 'END_CONTROL';

    const T_END = 'END_TABLE';
    const T_DOCS = 'TABLE DOCS';
    const T_ZAP = 'TABLE ZAPOVEDI';
    const T_IZD = 'TABLE IZDATELI';
    const T_MEST = 'TABLE MESTNOSTI';
    const T_IMOT = 'TABLE POZEMLIMOTI';
    const T_PRAVA = 'TABLE PRAVA';

    const ZEM_TABLE = array(
        '10450' => 'гр.ВЕЛИНГРАД',
        '00881' => 'с.АБЛАНИЦА',
        '07836' => 'с.БИРКОВА',
        '07853' => 'с.БОЗЬОВА',
        '07867' => 'с.БУТРЕВА',
        '12989' => 'с.ВРАНЕНЦИ',
        '18527' => 'с.ГОРНА ДЪБЕВА',
        '17823' => 'с.ГРАШЕВО',
        '23234' => 'с.ДРАГИНОВО',
        '41136' => 'с.КРЪСТАВА',
        '55631' => 'с.ПАШОВИ',
        '63687' => 'с.РОХЛЕВА',
        '65534' => 'с.СВЕТА ПЕТКА',
        '78272' => 'с.ЦВЕТИНО',
        '81863' => 'с.ЧОЛАКОВА',
        '86115' => 'с.ЮНДОЛА'
    );
    const NTP_TABLE = array(
        1000 => 'ТЕРИТОРИИ, ПРЕДНАЗНАЧЕНИ ЗА НУЖДИТЕ НА СЕЛСКОТО СТОПАНСТВО',
        1100 => 'НИВИ (ОРНА ЗЕМЯ)',
        1110 => 'Посевни площи',
        1111 => 'Полски култури',
        1112 => 'Зеленчукови култури',
        1113 => 'Оризища',
        1114 => 'Оранжерии с трайни конструкции',
        1119 => 'Други посевни площи',
        1120 => 'Цветни градини',
        1130 => 'Временно неизползвани орни земи',
        1131 => 'Наводнени орни земи',
        1132 => 'Орни земи за временни нужди на строителството',
        1139 => 'Други временни неизползвани орни земи',
        1140 => 'Изоставени орни земи',
        1141 => 'Изоставени орни земи поради маломерност',
        1142 => 'Силно наклонени и ерозирани орни земи',
        1143 => 'Трайно преовлажнени орни земи',
        1144 => 'Засолени орни земи',
        1145 => 'Изоставени орни земи поради изселване',
        1146 => 'Унищожени орни земи от промишлени предприятия',
        1147 => 'Изоставени орни земи покрай жп линии, канали',
        1149 => 'Други изоставени орни земи',
        1150 => 'Затревени ниви',
        1151 => 'Затревени ниви',
        1152 => 'Обработваеми земи в пасищен комплекс',
        1200 => 'ТРАЙНИ НАСАЖДЕНИЯ',
        1210 => 'Използвани територии, заети с трайни насаждения',
        1211 => 'Овощни насаждения (нетерасирани)',
        1212 => 'Овощни насаждения (терасирани)',
        1213 => 'Лозови насаждения (нетерасирани)',
        1214 => 'Лозови насаждения  (терасирани)',
        1215 => 'Етерично-маслодайни култури (нетерасирани)',
        1216 => 'Етерично-маслодайни култури (терасирани)',
        1217 => 'Ягодови градини (нетерасирани)',
        1218 => 'Ягодови градини (терасирани)',
        1220 => 'Други използвани територии с трайни насаждения',
        1221 => 'Хмелници',
        1222 => 'Разсадници',
        1223 => 'Малинови и касисови градини (нетерасирани)',
        1224 => 'Малинови и касисови градини (терасирани)',
        1229 => 'Територии, използвани за други трайни насаждения',
        1230 => 'Изоставени територии за трайни насаждения',
        1231 => 'Изоставени територии за трайни насаждения поради маломерност',
        1232 => 'Изоставени силно наклонени и ерозирани територии на трайни насаждения',
        1233 => 'Изоставени засолени територии на трайни насаждения',
        1234 => 'Изоставени трайни насаждения поради изселване',
        1239 => 'Гори в земеделски земи',
        1300 => 'ЕСТЕСТВЕНИ ЛИВАДИ',
        1310 => 'Използвани естествени ливади',
        1320 => 'Временно неизползвани естествени ливади',
        1321 => 'Наводнени естествени ливади',
        1322 => 'Естествени ливади за временни нужди на строителството',
        1329 => 'Временно неизползвани естествени ливади по други причини',
        1330 => 'Изоставени естествени ливади',
        1331 => 'Изоставени естествени ливади поради маломерност',
        1332 => 'Изоставени силно наклонени и ерозирани естествени ливади',
        1333 => 'Изоставени трайно наводнени естествени ливади',
        1334 => 'Изоставени засолени естествени ливади',
        1335 => 'Изоставени естествени ливади поради изселване',
        1339 => 'Трайно изоставени естествени ливади по други причини',
        1400 => 'ПАСИЩА, МЕРИ',
        1401 => 'Пасища с храсти',
        1410 => 'Пасище върху обработваема земя',
        1420 => 'Пасище върху необработваема земя',
        1430 => 'Мери',
        1500 => 'СТОПАНСКИ ДВОРОВЕ И ПРОИЗВОДСТВЕНИ БАЗИ НА СЕЛСКОТО СТОПАНСТВО',
        1510 => 'Машинно-тракторни станции',
        1520 => 'Бази за ремонт на селскостопанска техника',
        1530 => 'Силажовместилища',
        1540 => 'Ветеринарни лечебници',
        1550 => 'Складове за обслужване на селското стопанство',
        1560 => 'Терени, заети от хангари и гаражи на селскостопанска техника',
        1570 => 'Стопански дворове',
        1590 => 'Други територии, заети от производствени бази на селското стопанство',
        1600 => 'ЖИВОТНОВЪДНИ КОМПЛЕКСИ И ФЕРМИ',
        1610 => 'Животновъдни комплекси и ферми',
        1611 => 'Кравеферми',
        1612 => 'Овцеферми',
        1613 => 'Птицеферми',
        1619 => 'Други животновъдни комплекси',
        1700 => 'ПОЛСКИ ПЪТИЩА',
        1710 => 'Полски пътища',
        1720 => 'Прокари',
        1900 => 'ДРУГИ ТЕРИТОРИИ, ЗАЕТИ ОТ СЕЛСКОТО СТОПАНСТВО',
        1910 => 'Селскостопански летища',
        1920 => 'Други територии, заети от селско стопанство',
        1921 => 'Изградени торища',
        1922 => 'Xpacти',
        1929 => 'Други територии, заети от селско стопанство',
        2000 => 'ТЕРИТОРИИ ЗА НУЖДИТЕ НА ГОРСКОТО СТОПАНСТВО',
        2100 => 'ДЪРВОПРОИЗВОДИТЕЛНИ ГОРСКИ ПЛОЩИ',
        2110 => 'Залесени горски територии',
        2111 => 'Иглолистни дървесни видове',
        2112 => 'Широколистни дървесни видове',
        2113 => 'Нискостъблени дървесни видове (акация, гледичия)',
        2114 => 'Клек',
        2120 => 'Незалесени горски територии, под¬лежащи на залесяване',
        2121 => 'Голини',
        2122 => 'Пожарища',
        2123 => 'Сечища',
        2200 => 'НЕДЪРВОПРОИЗВОДИТЕЛНИ ГОРСКИ ПЛОЩИ',
        2210 => 'Обработваеми горски площи',
        2211 => 'Горски ниви',
        2212 => 'Горски ливади',
        2213 => 'Горски трайни насаждения',
        2214 => 'Горски разсадници',
        2215 => 'Дивечови ниви',
        2216 => 'Залесени ниви',
        2217 => 'Залесени пасища',
        2220 => 'Други недървопроизводителни гор¬ски площи',
        2221 => 'Поляни',
        2222 => 'Горски пътища',
        2223 => 'Просеки',
        2224 => 'Дворни места на горското стопан¬ство, животновъдни ферми',
        2225 => 'Складове на горското стопанство',
        2226 => 'Нелесопригодни голини',
        2227 => 'Нелесопригодни площи - дървес¬на, храстовидна растителност',
        2229 => 'Други недървопроизводителни горски площи',
        2230 => 'Горски трайни насаждения',
        2240 => 'Горски разсадници',
        2250 => 'Поляни',
        2260 => 'Горски пасища',
        2290 => 'Други недървопроизводителни горски територии',
        2300 => 'ГОРСКИ ПАСИЩА',
        2310 => 'Горски пътища',
        2320 => 'Просеки',
        2330 => 'Дворни места на горското стопанство',
        2340 => 'Складове на горското стопанство',
        2350 => 'Производствени бази на горското стопанство',
        2360 => 'Бази за ремонт на горскостопанска техника',
        2390 => 'Други територии за обслужване на горското стопанство',
        2400 => 'Незалесени горски територии, подлежащи на залесяване',
        2410 => 'Голини',
        2420 => 'Пожарища',
        2430 => 'Невъзобновени сечища',
        2440 => 'Дивечови площи',
        2900 => 'Други територии на горското стопанство',
        3000 => 'ТЕРИТОРИИ, ЗАЕТИ ОТ НАСЕЛЕНИ МЕСТА',
        3020 => 'Бензиностанция',
        3100 => 'ЖИЛИЩНИ ТЕРИТОРИИ',
        3110 => 'Индивидуално застрояване',
        3120 => 'Комплексно малоетажно застрояване',
        3130 => 'Комплексно многоетажно застрояване',
        3190 => 'Други жилищни терени',
        3200 => 'ТЕРЕНИ НА ОБЩЕСТВЕНИ СГРАДИ И ЦЕНТРОВЕ',
        3300 => 'ПРОИЗВОДСТВЕНИ ТЕРЕНИ',
        3310 => 'Производство на енергия и енергетични продукти',
        3311 => 'Производство на електроенергия',
        3312 => 'Производство на топлоенергия',
        3313 => 'Топлопромишлено производство на продукти от въгли¬ща, нефт, шисти',
        3319 => 'Други терени за производство на енергия и енергийни продукти',
        3320 => 'Преработка на черни и цветни метали',
        3321 => 'Територии на черна металургия',
        3322 => 'Територии на цветна металургия',
        3330 => 'Машиностроителна и машино¬об¬ра¬ботваща промишленост',
        3331 => 'Машиностроителна и машино¬об¬ра¬ботваща промишленост',
        3332 => 'Химическа и каучукова промишленост',
        3340 => 'Дърводобивна, дървообра¬бот¬ва¬ща и целулозно-хартиена про¬миш¬¬ле¬ност',
        3341 => 'Дърводобивна и дърво¬обра¬бот¬ваща промишленост',
        3342 => 'Целулозно-хартиена промиш¬ле¬ност',
        3350 => 'Производство на строителни материали и стъкло',
        3351 => 'Производство на строителни материали,конструкции и изделия',
        3352 => 'Производство на стъкло',
        3360 => 'Лека промишленост',
        3361 => 'Текстилна промишленост',
        3362 => 'Шивашка промишленост',
        3363 => 'Кожарска,кожухарска и обувна промишленост',
        3364 => 'Хранително-вкусова промиш¬ле¬ност',
        3369 => 'Територии на друга лека про¬миш¬¬леност',
        3370 => 'Полиграфическа промишленост',
        3380 => 'Други промишлени територии',
        3390 => 'Складови терени',
        3391 => 'Складове на държавни резерви',
        3392 => 'Базисни складове',
        3399 => 'Други складови територии',
        3400 => 'ТЕРИТОРИИ НА ОЗЕЛЕНЯ¬ВА¬НЕ И СПОРТ НА ОТКРИТО',
        3410 => 'Територии - зелени площи за широко обществено ползване',
        3411 => 'Общоградски, районни или микрорайонни градини, паркове',
        3419 => 'Друг вид зелени площи с широко обществено ползване',
        3420 => 'Територии - зелени площи с ограничено обществено ползване',
        3421 => 'Площи на вътрешно квартално озеленяване',
        3429 => 'Друг вид зелени площи с огра¬ни¬чено обществено ползване',
        3430 => 'Зелени площи със специално пред-назначение',
        3431 => 'Спортни терени',
        3432 => 'Зелени околоводни площи',
        3433 => 'Ботанически градини (паркове)',
        3434 => 'Зоологически градини (паркове)',
        3435 => 'Зелени площи с учебна и научно-изследователска цел',
        3436 => 'Гробища',
        3437 => 'Аквариуми на открито (делфи¬на¬риуми)',
        3439 => 'Друг вид зелени площи със спе¬циал¬но предназначение',
        3490 => 'Територии, заети от други видове зелени площи',
        3500 => 'ТЕРЕНИ НА ГРАДСКО И КРАЙГРАДСКО ДВИЖЕНИЕ',
        3510 => 'Територии,заети от улична мрежа',
        3511 => 'Булеварди',
        3512 => 'Улици',
        3513 => 'Улици - алеи',
        3514 => 'Алеи',
        3515 => 'Улични кръстовища',
        3516 => 'Площади',
        3517 => 'Паркинги',
        3518 => 'Входове на пешеходни подлези',
        3519 => 'Други територии на уличната мрежа',
        3520 => 'Територии на градския транспорт',
        3521 => 'Линии на метро',
        3522 => 'Станции на метро',
        3523 => 'Трамвайни линии',
        3524 => 'Трамвайни и тролейбусни депа',
        3525 => 'Автобусни паркове',
        3526 => 'Таксиметрови паркове',
        3527 => 'Ремонт на транспортни средства',
        3528 => 'Автомобилни паркове',
        3529 => 'Други територии на градския транспорт',
        3900 => 'ДРУГ ВИД ТЕРЕНИ СЪС СЕ¬ЛИ¬ЩЕН ХАРАКТЕР',
        3999 => 'Територии, заети от населени места извън регулация',
        4000 => 'ТЕРИТОРИИ, ЗАЕТИ ОТ ВОД¬НИ ПЛОЩИ И ТЕЧЕНИЯ',
        4100 => 'ВОДНИ ТЕЧЕНИЯ',
        4110 => 'Водни течения',
        4111 => 'Вътрешни реки',
        4112 => 'Гранични реки',
        4113 => 'Водопади',
        4119 => 'Други видове водни течения',
        4200 => 'ЕСТЕСТВЕНИ ВОДНИ ПЛОЩИ',
        4210 => 'Естествени водни площи',
        4211 => 'Езера',
        4212 => 'Блата',
        4219 => 'Друг вид естествени водни площи',
        4300 => 'ЧЕРНОМОРСКИ ТЕРИ¬ТО¬РИАЛ¬НИ ВОДИ',
        4400 => 'ИЗКУСТВЕНИ ВОДНИ БАСЕЙНИ',
        4410 => 'Изкуствени водни басейни',
        4411 => 'Язовирни езера',
        4412 => 'Водоеми',
        4413 => 'Рибарници',
        4414 => 'Солници',
        4415 => 'Декоративни езера',
        4416 => 'Спортни плувни басейни',
        4417 => 'Басейни с резервна вода (про¬миш¬лени предприятия и спе¬циал¬ни терени)',
        4419 => 'Друг вид изкуствени водни басейни',
        4500 => 'КАНАЛИ',
        4510 => 'Канали',
        4511 => 'Напоителни канали',
        4512 => 'Отводнителни канали',
        4513 => 'Плавателни канали',
        4519 => 'Друг вид канали',
        4600 => 'НАХОДИЩА НА ПРЕСНИ ПОД¬ЗЕМНИ ВОДИ',
        4610 => 'Находища на пресни подземни води',
        4611 => 'Извори, некаптирани',
        4612 => 'Извори, каптирани',
        4613 => 'Пулсиращи извори',
        4700 => 'НАХОДИЩА НА МИНЕРАЛНИ ВОДИ',
        4710 => 'Находища на минерални води',
        4711 => 'Минерални води, некаптирани',
        4712 => 'Минерални води, каптирани',
        4800 => 'ТЕРИТОРИИ НА ВОДО¬СТО¬ПАН¬СКИ, ХИДРО¬МЕЛИО¬РА¬ТИВНИ СЪОРЪЖЕНИЯ',
        4900 => 'ДРУГИ ТЕРИТОРИИ, ЗАЕТИ ОТ ВОДНИ ТЕЧЕНИЯ И ВОДНИ ПЛОЩИ',
        4910 => 'Други територии, заети от водни течения и водни площи',
        4911 => 'Отдалечени от водно течение предпазни диги',
        4919 => 'Други територии, заети от водни течения и водни площи',
        5000 => 'ТЕРИТОРИИ ЗА ДОБИВ НА ПОЛЕЗНИ ИЗКОПАЕМИ',
        5100 => 'ТЕРИТОРИИ С УСТАНОВЕНИ ПОЛЕЗНИ ИЗКОПАЕМИ',
        5110 => 'Територии с установени полезни изкопаеми',
        5111 => 'Територии с установени руди',
        5112 => 'Територии с установени въглища',
        5113 => 'Територии с установени нерудни изкопаеми',
        5114 => 'Територии с установени нефт и газ',
        5115 => 'Територии с установени пясък и чакъл',
        5116 => 'Територии-суровини за промиш¬леността и строителството в ска¬ли',
        5117 => 'Територии с установени глини за строителна керамика',
        5119 => 'Други територии с установени полезни изкопаеми',
        5200 => 'ТЕРИТОРИИ С РАЗРАБОТЕНИ ПОЛЕЗНИ ИЗКОПАЕМИ',
        5210 => 'Територии с разработени полезни изкопаеми',
        5211 => 'Територии, заети от подземно добиване на руди',
        5212 => 'Територии, заети от открити руд¬ници за добив на руди',
        5213 => 'Територии, заети от подземно добиване на въглища',
        5214 => 'Територии с открити рудници за добив на въглища',
        5215 => 'Територии с подземно добиване на нерудни полезни изкопаеми',
        5216 => 'Открити рудници за добив на неруд¬ни полезни изкопаеми',
        5217 => 'Кариери за пясък, чакъл и глини за строителна керамика',
        5218 => 'Кариери-суровини за строи¬тел¬ството и промишлеността в ска¬лен ма¬сив',
        5219 => 'Други територии с разработени полезни изкопаеми',
        5300 => 'НАСИПИ',
        5310 => 'Насипи',
        5311 => 'Табани',
        5312 => 'Халди',
        5319 => 'Други насипи',
        5321 => 'Линии на метро',
        5400 => 'ТЕРИТОРИИ СЪС СГРАДИ, СЪОРЪЖЕНИЯ ЗА ДОБИВ НА ПОЛЕЗНИ ИЗКОПАЕМИ',
        5900 => 'ДРУГИ ТЕРИТОРИИ ЗА ДОБИВ НА ПОЛЕЗНИ ИЗКОПАЕМИ',
        5910 => 'Други територии за добив на полезни изкопаеми',
        5911 => 'Опитни геоложки кариери',
        5912 => 'Депа със строителни материали',
        5919 => 'Други територии за добив на полезни изкопаеми',
        6000 => 'ТЕРИТОРИИ ЗА НУЖДИТЕ НА ТРАНСПОРТА',
        6100 => 'МЕЖДУСЕЛИЩНА ПЪТНА ТРАНСПОРТНА МРЕЖА',
        6111 => 'Автомагистрали',
        6112 => 'Пътища I клас',
        6113 => 'Пътища II клас',
        6114 => 'Пътища III клас',
        6115 => 'Пътища IV клас',
        6116 => 'Пътни кръстовища',
        6120 => 'Местни пътища',
        6130 => 'Ведомствени пътища (без полски и горски пътища)',
        6140 => 'Автогари и автоспирки',
        6150 => 'Автобусен парк на междуселищен транспорт',
        6160 => 'Ремонт на междуселищен транспорт',
        6170 => 'Територии на сгради и съоръ¬же¬ния за поддържане на пътища',
        6180 => 'Учебни транспортни територии',
        6190 => 'Други територии на междуселищна пътна транспортна мрежа',
        6200 => 'ТЕРИТОРИИ НА ВЪЗДУШНИЯ ТРАНСПОРТ (ЛЕТИЩА)',
        6210 => 'Територии на въздушния транс¬порт (летища)',
        6211 => 'Аерогари',
        6212 => 'Писти за излитане на самолети и хеликоптери',
        6213 => 'Хангари',
        6214 => 'Сгради и съоръжения за ремонт и поддържане на самолети и хели¬коп¬тери',
        6219 => 'Други територии на въздушния транспорт',
        6300 => 'ТЕРИТОРИИ НА ЖП ТРАНС¬ПОРТА',
        6310 => 'Територии на жп транспорта',
        6311 => 'Жп линии',
        6312 => 'Жп гари и спирки',
        6313 => 'Жп депа',
        6314 => 'Ремонт и обслужване на жп транспорта',
        6319 => 'Други територии на жп транс¬порта',
        6400 => 'ТЕРИТОРИИ НА ВОДНИЯ ТРАНСПОРТ (БЕЗ ВОДНИ ПЛОЩИ)',
        6410 => 'Пристанища',
        6411 => 'Пътнически пристанища',
        6412 => 'Пристанища за товари',
        6420 => 'Ремонт на средства за воден транспорт',
        6490 => 'Други територии на водния транспорт',
        6500 => 'ТЕРИТОРИИ НА ВЪЖЕНИ ЛИНИИ',
        6510 => 'Територии на въжени линии',
        6511 => 'Пътнически въжени линии',
        6512 => 'Въжени линии за транспорт на товари',
        6513 => 'Сгради и съоръжения за обслужване и ремонт на въжени линии',
        6519 => 'Други територии на въжени линии',
        6600 => 'ТЕРИТОРИИ, ЗАЕТИ ОТ ПРОВОДИ',
        6610 => 'Водопроводи и съоръжения към тях',
        6620 => 'Канализационни проводи и съоръжения към тях',
        6630 => 'Електропроводи и съоръжения към тях',
        6640 => 'Продуктопроводи и съоръжения към тях',
        6641 => 'Нефтопроводи',
        6642 => 'Газопроводи',
        6649 => 'Други видове продуктопроводи',
        6650 => 'Топлофикационни проводи и съоръжения към тях',
        6660 => 'Съобщителни проводи и съоръжения',
        6690 => 'Територии, заети от други видове проводи',
        6900 => 'ДРУГИ ТЕРИТОРИИ НА ТРАНСПОРТА',
        7000 => 'ТЕРИТОРИИ, ЗАЕТИ ОТ ЕС¬ТЕ¬СТВЕНИ И ИЗКУСТВЕНИ РЕ¬СУРСИ ЗА ВЪЗ¬СТА-НО¬ВИ¬ТЕЛНИ МЕРОПРИЯТИЯ',
        7100 => 'ТЕРИТОРИИ, ЗАЕТИ ОТ ЕСТЕ¬СТВЕНИ РЕСУРСИ ЗА ВЪЗ¬СТА¬НОВИТЕЛНИ МЕРО¬ПРИЯ¬ТИЯ',
        7110 => 'Резервати',
        7120 => 'Природни (народни) паркове',
        7130 => 'Извънселищни паркове и лесо¬пар¬кове',
        7140 => 'Природни забележителности',
        7141 => 'Скални образувания',
        7142 => 'Морени',
        7143 => 'Ждрела',
        7144 => 'Скали с пещерни образувания, скални прозорци',
        7145 => 'Пещери',
        7146 => 'Пясъчни образувания (дюни, пи¬ра¬миди и др.)',
        7147 => 'Земни образувания (земни пира¬миди, могили, валове)',
        7149 => 'Друг вид природни забележителности',
        7150 => 'Плажове',
        7151 => 'Морски плажове',
        7152 => 'Речни плажове',
        7159 => 'Други плажове',
        7160 => 'Находища на лечебна кал',
        7190 => 'Други територии, заети от естествени ресурси за възстановителни мероприятия',
        7200 => 'ТЕРИТОРИИ, ЗАЕТИ ОТ ИЗ¬КУ¬СТВЕНИ РЕСУРСИ ЗА ВЪЗ¬СТА¬НОВИТЕЛНИ МЕРО¬ПРИЯ¬ТИЯ',
        7210 => 'Вилни зони',
        7211 => 'Вилни зони',
        7212 => 'Терени за здравни и курортни нужди',
        7220 => 'Къмпинги, мотели',
        7221 => 'Къмпинги',
        7222 => 'Мотели',
        7230 => 'Лагери',
        7231 => 'Детски лагери',
        7232 => 'Средношколски лагери',
        7233 => 'Младежки лагери',
        7239 => 'Други лагери',
        7240 => 'Туристически бази',
        7241 => 'Туристически хижи',
        7242 => 'Централни алпийски лагери',
        7243 => 'Територии на планинска контролно-спасителна служба',
        7249 => 'Други туристически бази',
        7250 => 'Възстановителни заведения',
        7251 => 'Санаториуми',
        7252 => 'Профилакториуми',
        7253 => 'Почивни домове',
        7254 => 'Климатични детски градини',
        7255 => 'Горски климатични училища',
        7256 => 'Балнеохотели',
        7257 => 'Балнеосанаториуми',
        7258 => 'Пътеки на здравето',
        7259 => 'Други възстановителни заведения',
        7260 => 'Недвижими археологически паметници на културата',
        7261 => 'Градоустройствени археоло¬ги¬че¬ски паметници на културата',
        7262 => 'Сгради - археологически паметници на културата',
        7263 => 'Съоръжения - археологически паметници на културата',
        7270 => 'Недвижими архитектурно-строи¬телни паметници на културата',
        7271 => 'Градоустройствени архитек¬тур¬но-строи-телни паметници на кул¬турата',
        7272 => 'Сгради - архитектурно-строи¬телни паметници на културата',
        7273 => 'Съоръжения - архитектурно-строи¬телни паметници на кул¬ту¬ра¬та',
        7280 => 'Паметници на изобразителните и приложните изкуства',
        7290 => 'Исторически паметници и места',
        7291 => 'Исторически паметници',
        7292 => 'Исторически местности (места)',
        7293 => 'Сгради - исторически паметници',
        7294 => 'Съоръжения - исторически паметници',
        7300 => 'ТЕРИТОРИИ НА СПОРТА',
        7310 => 'Територии на лека атлетика и футбол',
        7320 => 'Територии на спортна и худо¬же¬ствена гимнастика, спортни и си¬ло¬ви игри',
        7330 => 'Територии на детски и спортни игри',
        7340 => 'Територии на профилактични спортни занимания за възрастни',
        7350 => 'Територии на зимни спортове',
        7351 => 'Изкуствени заледени пързалки',
        7352 => 'Ски-писти',
        7353 => 'Ски-плацове',
        7359 => 'Други територии на зимни спор¬тове',
        7360 => 'Територии на конен спорт',
        7370 => 'Територии на вело- и мотоспорт',
        7371 => 'Колодруми',
        7372 => 'Мотописти',
        7373 => 'Автописти',
        7379 => 'Други територии за вело- и мото¬спорт',
        7380 => 'Територии на спортни бази',
        7381 => 'Ловни бази',
        7382 => 'Риболовни бази',
        7382 => 'Риболовни бази',
        7383 => 'Гребни бази',
        7384 => 'Ветроходни бази',
        7389 => 'Други видове спортни бази',
        7390 => 'Територии на други видове спортове',
        7400 => 'ДРУГИ ТЕРИТОРИИ НА ЕСТЕ¬СТВЕНИ, ИЗКУСТВЕНИ РЕ¬СУР¬СИ ЗА ВЪЗ¬СТА¬НО-ВИ¬ТЕЛ¬НИ МЕРОПРИЯТИЯ',
        8000 => 'ТЕРИТОРИИ, ЗАЕТИ ОТ СКА¬ЛИ И ПЯСЪЦИ',
        8100 => 'СКАЛИ',
        8200 => 'ПЯСЪЦИ',
        8300 => 'СИПЕИ',
        8400 => 'ДЕРЕТА, ОВРАЗИ, ЯМИ',
        8410 => 'Дерета',
        8420 => 'Оврази и промойни',
        8430 => 'Ями',
        8500 => 'МОЧУРИЩА',
        8600 => 'ПУСТЕЕЩИ НЕОБРА¬БОТ¬ВАЕ¬МИ ЗЕМИ',
        8900 => 'ДРУГИ ТЕРЕНИ БЕЗ ОПРЕ¬ДЕ¬ЛЕНО СТОПАНСКО ПРЕД¬НА¬ЗНАЧЕНИЕ',
        9000 => 'ТЕРИТОРИИ, ЗАЕТИ ОТ ИН¬ДУ-СТРИАЛ¬НИ И МИН¬НО¬ДОБИВНИ ОТПАДЪЦИ',
        9100 => 'ХВОСТОХРАНИЛИЩА',
        9200 => 'СГУРООТВАЛИ',
        9300 => 'УТАИТЕЛИ',
        9400 => 'ДЕПА ЗА ИНДУСТРИАЛНИ ОТПАДЪЦИ',
        9500 => 'ДЕПА ЗА ВТОРИЧНИ СУРО¬ВИНИ',
        9600 => 'ДЕПА ЗА БИТОВИ ОТПАДЪЦИ (СМЕТИЩА)',
        9700 => 'ДЕПА, ХУМУСНИ',
        9900 => 'ТЕРИТОРИИ, ЗАЕТИ ОТ ДРУГИ ВИДОВЕ ОТПАДЪЦИ',
        9999 => 'Недефиниран начин на трайно ползване'
    );
    const NTP_TABLE_NEW = array(
        1000 => 'Ниско застрояване (до 10 m)',
        1010 => 'Средно застрояване (от 10 до 15 m)',
        1020 => 'Високо застрояване (над 15 m) ',
        1030 => 'Комплексно застрояване ',
        1040 => 'Незастроен имот за жилищни нужди',
        1050 => 'За друг вид застрояване',
        1100 => 'За обект комплекс за здравеопазване',
        1110 => 'За обект комплекс за образование ',
        1120 => 'За обект комплекс за култура и изкуство',
        1130 => 'За обект комплекс за социални грижи',
        1140 => 'За административна сграда, комплекс',
        1150 => 'За обект за детско заведение',
        1160 => 'За търговски обект, комплекс',
        1170 => 'За обект комплекс за битови услуги ',
        1180 => 'За обект комплекс за научна и проектантска дейност',
        1190 => 'За култова, религиозна сграда, комплекс',
        1200 => 'Незастроен имот за обществена сграда, комплекс',
        1210 => 'За друг обществен обект, комплекс',
        1300 => 'Oбществен селищен парк, градина',
        1310 => 'Oбществен извънселищен парк, горски парк		',
        1320 => 'Дендрариум',
        1330 => 'Ботаническа градина',
        1340 => 'Зоологическа градина',
        1350 => 'Гробищен парк		 ',
        1360 => 'За защитно и изолационно озеленяване',
        1370 => 'За друг вид озеленени площи',
        1400 => 'Стадион',
        1410 => 'За спортна зала',
        1420 => 'Спортно игрище',
        1430 => 'За трасета за вело- и мотоспорт',
        1440 => 'Ски писта',
        1450 => 'За съоръжения за зимни спортове ',
        1460 => 'За ловна база и стрелбище',
        1470 => 'За водна спортна база',
        1480 => 'За плувен басейн',
        1490 => 'Незастроен имот за спортен обект',
        1500 => 'За други видове спорт',
        1600 => 'За вилна сграда',
        1610 => 'За земеделски труд и отдих (съгласно § 4 от ПЗР на ЗСПЗЗ)',
        1620 => 'За почивен лагер',
        1630 => 'За туристическа база, хижа',
        1640 => 'За санаториум, балнеосанаториум, профилакториум',
        1650 => 'За курортен хотел, почивен дом',
        1660 => 'За къмпинг, мотел',
        1670 => 'Незастроен имот за курортно-рекреационен обект',
        1680 => 'За друг курортно-рекреационен обект',
        1685 => 'Застроен имот в земеделска територия',
        1690 => 'Застроен имот в горска територия',
        1700 => 'За електроенергийното производство',
        1710 => 'За топлоенергийното производство',
        1720 => 'За друго производство на продукти от нефт, въглища, газ, шисти',
        1730 => 'За черната и цветната металургия',
        1740 => 'За машиностроителната и машинообработващата промишленост',
        1750 => 'За химическата и каучуковата промишленост',
        1760 => 'За дърводобивната и дървообработващата промишленост',
        1770 => 'За целулозно-хартиената промишленост',
        1780 => 'За производството на строителни материали, конструкции и изделия',
        1790 => 'За производството на стъкло',
        1800 => 'За текстилната промишленост',
        1810 => 'За шивашката промишленост',
        1820 => 'За кожарската, кожухарската и обувната промишленост',
        1830 => 'За хранително-вкусовата промишленост',
        1840 => 'За полиграфическата промишленост',
        1850 => 'За складова база',
        1860 => 'За база за селскостопанска или горскостопанска техника',
        1870 => 'За ветеринарна лечебница',
        1880 => 'За стопански двор',
        1890 => 'За животновъден комплекс',
        1900 => 'За животновъдна ферма',
        1910  => 'Незастроен имот за производствен, складов обект',
        1920 => 'За друг вид производствен, складов обект',
        1930 => 'Незастроен имот',
        2000 => 'За археологически паметник на културата',
        2010 => 'За архитектурен паметник на културата',
        2020 => 'За исторически паметник, историческо място',
        2030 => 'За паметник на изобразителното и приложното изкуство',
        2040 => 'За друг имот на културно-историческото наследство',
        2100 => 'За първостепенна улица',
        2110 => 'За второстепенна улица',
        2120 => 'За алея',
        2130 => 'За кръстовище',
        2140 => 'За площад',
        2150 => 'За паркинг',
        2160 => 'За вход на пешеходен подлез, метро',
        2170 => 'За линии на релсов транспорт',
        2180 => 'За депо за релсов транспорт',
        2190 => 'За автогараж',
        2200 => 'За автомагистрала',
        2210 => 'За път от републиканската пътна мрежа ',
        2220 => 'За местен път',
        2230 => 'За селскостопански, горски, ведомствен път',
        2240 => 'За автогара, автоспирка',
        2250 => 'За бензиностанция, газостанция, метанстанция',
        2260 => 'За летище, аерогара',
        2270 => 'За железопътна гара, спирка',
        2280 => 'За ремонт и поддържане на транспортни средства',
        2290 => 'За пристанище',
        2300 => 'За въжена линия',
        2310 => 'За друг поземлен имот за движение и транспорт',
        2400 => 'За съоръжение на водопровод',
        2410 => 'За съоръжение на канализация',
        2420 => 'За съоръжение на електропровод',
        2430 => 'За съоръжение на нефтопровод',
        2440 => 'За съоръжение на газопровод',
        2450 => 'За съоръжение на топлофикационен провод',
        2460 => 'За съоръжение на съобщителен провод',
        2470 => 'За съоръжение на друг вид провод',
        2471 => 'За съоръжение за превантивна защита ',
        2472 => 'За друг вид изкуствен ресурс за превантивна защита',
        2500 => 'Нива',
        2510 => 'Зеленчуковa градина',
        2520 => 'Оризище',
        2530 => 'Оранжерия с трайна конструкция',
        2540 => 'Дивечова нива',
        2550 => 'Неизползвана нива (угар, орница)',
        2560 => 'Изоставена орна земя',
        2570 => 'Друг вид нива',
        2580 => 'Изоставена нива',
        2600 => 'Овощна градина',
        2610 => 'Лозе',
        2620 => 'Етерично-маслодайна култура ',
        2630 => 'Хмелници',
        2640 => 'Разсадник',
        2650 => 'Изоставено трайно насаждение',
        2660 => 'Друг вид трайно насаждение',
        2700 => 'Ливада',
        2710 => 'Неизползвана ливада',
        2720 => 'Изоставена ливада',
        2730 => 'Друг вид ливада',
        2800 => 'Пасище',
        2810 => 'Мера',
        2820 => 'Високопланинско пасище',
        2830 => 'Друг вид земеделска земя',
        2840 => 'Гори и храсти в земеделска земя',
        2900 => 'Иглолистна гора',
        2910 => 'Широколистна гора',
        2920 => 'Смесена гора',
        2930 => 'Нискостъблена гора ',
        2940 => 'Клек',
        2950 => 'Друг вид дървопроизводителна гора',
        3000 => 'Голина',
        3010 => 'Поляна',
        3020 => 'Просека',
        3030 => 'Нелесопригодна площ - дървесна растителност, храсти',
        3040 => 'Друг вид недървопроизводителна горска площ',
        3050 => 'Друг вид горски имот',
        3060 => 'Горски разсадник',
        3100 => 'Водно течение, река',
        3110 => 'Езеро',
        3120 => 'Блато',
        3130 => 'Мочурище',
        3140 => 'Язовир',
        3150 => 'Водоем',
        3160 => 'Рибарник',
        3170 => 'Солница',
        3180 => 'За басейн с резервна вода за промишлено предприятие',
        3190 => 'Напоителен канал',
        3200 => 'Отводнителен канал',
        3210 => 'Плавателен канал',
        3220 => 'За извор на прясна вода',
        3230 => 'За извор на минерална вода',
        3240 => 'За водостопанско, хидромелиоративно съоръжение',
        3245 => 'За брегоукрепителни и брегозащитни системи и съоръжения за предпазване от вредното въздействие от водите',
        3246 => 'За дамба',
        3250 => 'За друг вид водно течение, водна площ, съоръжение',
        3260 => 'Гранична река',
        3300 => 'Черноморски териториални води',
        3301 => 'Крайбрежно езеро',
        3302 => 'Лагуна',
        3303 => 'Лиман',
        3304 => 'Влажна зона',
        3400 => 'Резерват',
        3410 => 'Природна забележителност',
        3420 => 'Поддържан резерват',
        3430 => 'Защитена местност',
        3431 => 'Природен парк',
        3432 => 'Национален парк',
        3440 => 'Крайбрежна плажна ивица',
        3441 => 'Морски плаж',
        3442 => 'Пясъчна дюна',
        3443 => 'Остров',
        3450 => 'За находище на лечебна кал',
        3460 => 'За друг вид естествен ресурс за превантивна защита ',
        3500 => 'За добив на руди',
        3510 => 'За добив на въглища',
        3520 => 'За добив на нерудни полезни изкопаеми',
        3530 => 'За кариера за пясък, чакъл и глини за строителната керамика',
        3540 => 'За кариера за суровини за строителството и промишлеността в скален масив',
        3550 => 'Със сгради и съоръжения за добив на полезни изкопаеми',
        3560 => 'За друг вид обект за добив на полезни изкопаеми',
        3600 => 'Хвостохранилище',
        3610 => 'Сгуроотвал',
        3620 => 'Утаител',
        3630 => 'Депо за индустриални отпадъци',
        3640 => 'Депо за вторични суровини ',
        3650 => 'Депо за битови отпадъци (сметище)',
        3660 => 'Депо за хумус',
        3670 => 'Насип, насипище',
        3680 => 'За друг вид отпадъци',
        3700 => 'Деградирала орна земя',
        3710 => 'Деградирало трайно насаждение',
        3720 => 'Деградирала ливада',
        3730 => 'Друг вид деградирала земя',
        3800 => 'За склад на държавния резерв',
        3810 => 'За друг вид имот със специално предназначение и ползване',
        3900 => 'Скали',
        3910 => 'Пясъци',
        3920 => 'Сипей',
        3930 => 'Дере',
        3940 => 'Овраг, промойна',
        3950 => 'Ями',
        3960 => 'Друг вид поземлен имот без определено стопанско предназначение',
        4000 => 'Поземлен имот със смесен начин на трайно ползване',
        4100 => 'Поземлен имот с недефиниран начин на трайно ползване'
    );



    public function loadLands($filePath)
    {

        $handle = fopen($filePath, "r");
        if ($handle) {
            $start = microtime(true);

            //read cad line by line
            while (($line = fgets($handle)) !== false) {

                //set ekatte
                if(empty($this->EKATTE)){
                    $this->setEKATTE($line);
                }

                //set cad block
                $this->setCadBlock($line);

                //find lands table and handle line
                if($this->cadBlock === self::T_IMOT && $this->startsWith($line, 'D')){
                    //remove "D "
                    $line = substr($line, 2);

                    //change encoding
//                    $line = $this->convertor->convert('bulgarian-mik', 'utf-8', $line);

                    //remove " "" "
                    //$line = preg_replace("/[^a-zA-Z0-9,.]/", "", $line); //remove all exept a-zA-Z0-9,.
                    $line = preg_replace("/[\"]/", "", $line); //remove only "

                    $lineArr = explode(',', $line);
                    //3 - VIDS
                    //get only lands with VIDS 3 or 4
                    //3	Общинска публична
                    //4	Общинска частна
                    if($lineArr[3] == '3' || $lineArr[3] == '4'){
                        //add to landsArr
                        $this->landsArr[$lineArr[0]] = [
                            $this->EKATTE.'.'.$lineArr[0], //0 - IDENT
                            $lineArr[6], //6 - MESTNOST
                            $lineArr[4], //4 - NTP
                            $lineArr[14], //14 - ZAPOVEDI
                        ];
                    }
                }

                //get all areas
                if($this->cadBlock === self::C_CAD && $this->startsWith($line, 'CONTUR_AREA')){
                    //change encoding
//                    $line = $this->convertor->convert('bulgarian-mik', 'utf-8', $line);

                    $lineArr = explode(' ', $line);
                    $this->areasArr[$lineArr[1]] = trim($lineArr[2]);
                }

                //get mest
                if($this->cadBlock == self::T_MEST && $this->startsWith($line, 'D')){
                    //remove "D "
                    $line = substr($line, 2);
                    //change encoding
//                    $line = $this->convertor->convert('bulgarian-mik', 'utf-8', $line);
                    //remove " "" "
                    $line = preg_replace("/[\"]/", "", $line);

                    $lineArr = explode(',', $line);

                    $this->mestArr[$lineArr[0]] = $lineArr[1];
                }

                //get prava
                //todo get pravaArr and docArr (land->prava->document->izdatel)
                if($this->cadBlock == self::T_PRAVA && $this->startsWith($line, 'D')){
                    //remove "D "
                    $line = substr($line, 2);
                    //change encoding
//                    $line = $this->convertor->convert('bulgarian-mik', 'utf-8', $line);
                    $line = preg_replace("/[\"]/", "", $line); //remove only "
                    $lineArr = explode(',', $line);

                    $this->pravaArr[$lineArr[0]] = $lineArr[3]; //doc num
                }

                //get docs
                if($this->cadBlock === self::T_DOCS && $this->startsWith($line, 'D')){
                    //remove "D "
                    $line = substr($line, 2);
                    //change encoding
//                    $line = $this->convertor->convert('bulgarian-mik', 'utf-8', $line);
                    //remove " "" "

                    $lineArr = explode(',', $line);
                    $docNum = preg_replace("/[\"]/", "", $lineArr[2]);

                    $this->docsArr[(string)$lineArr[0]] = $docNum.'/'.$lineArr[3];
                }
            }

            //process arrays
            $batchCount = 0;
            foreach ($this->landsArr as $id => $land){
                if(key_exists($id, $this->pravaArr)){
                    $pravo = $this->pravaArr[$id];
                    $documentsArray = $this->docsArr;
                    $doc = $documentsArray[$pravo];
                    $doc = $this->convertor->convert('bulgarian-mik', 'utf-8', $doc);
                }else{
                    $doc = '';
                }

                $mest = !empty($land[1]) ? $this->mestArr[$land[1]] : '';
                $mest = $this->convertor->convert('bulgarian-mik', 'utf-8', $mest);


                $landEntity = new Lands();
                $landEntity->setNum($land[0]);
                $mestEntity = $this->em->getRepository(Mest::class)->findOneBy(['name'=>$mest]);
                if(!isset($mestEntity)) {
                    $mestEntity = new Mest();
                    $mestEntity->setName($mest);
                }
                $landEntity->setMest($mestEntity);

                $zem = $this->zem;
                $zemEntity = $this->em->getRepository(Zem::class)->findOneBy(['name'=>$zem]);
                if(!isset($zemEntity)) {
                    $zemEntity = new Zem();
                    $zemEntity->setName($this->zem);
                }
                $landEntity->setZem($zemEntity);

                $ntp = self::NTP_TABLE_NEW[$land[2]];
                $ntpEntity = $this->em->getRepository(Ntp::class)->findOneBy(['name'=>$ntp]);
                if($ntpEntity == null) {
                    $ntpEntity = new Ntp();
                    $ntpEntity->setName($ntp);
                }
                $landEntity->setNtp($ntpEntity);

                $katEntity = $this->em->getRepository(Kat::class)->findOneBy(['name'=>'']);
                if(!isset($katEntity)){
                    $katEntity = new Kat();
                    $katEntity->setName('');
                }
                $landEntity->setKat($katEntity);

                $area = $this->areasArr[$id];
                $area = $area/1000;
                $area = round($area, 2);

                $landEntity->setArea($area);

                $docEntity = $this->em->getRepository(Doc::class)->findOneBy(['name'=>$doc]);
                if($docEntity == null) {
                    $docEntity = new Doc();
                    $docEntity->setName($doc);
                }
                $landEntity->setDoc($docEntity);

                $this->em->persist($landEntity);
                $this->em->flush();
                $this->em->clear();
            }


            fclose($handle);
            $end = microtime(true);
            dump($end-$start);
            exit;
        } else {
            dump('ГРЕШКА!');
        }


    }

    private function setEKATTE($line)
    {
        if($this->startsWith($line, 'EKATTE'))
        {
            $lineArr = explode(' ', $line);
            $this->EKATTE = trim($lineArr[1]);
            dump($this->EKATTE);
            $this->zem = self::ZEM_TABLE[$this->EKATTE];
            dump($this->zem);

        }
    }

    private function setCadBlock($line)
    {
        //GRAPHIC
        //start cad layer
        if($this->startsWith($line, self::L_CAD)) {
            $this->cadBlock = self::L_CAD;
            //dump($this->cadBlock);
        }
        //start control cad
        elseif ($this->startsWith($line, self::C_CAD)) {
            $this->cadBlock = self::C_CAD;
            //dump($this->cadBlock);
        }
        //end cad layer or control
        elseif ($this->startsWith($line, self::L_END) || $this->startsWith($line, self::C_END)) {
            $this->cadBlock = null;
            //dump($this->cadBlock);
        }
        //TABLES
        //end tables
        elseif ($this->startsWith($line, self::T_END)){
            $this->cadBlock = null;
            //dump($this->cadBlock);
        }
        //start table docs
        elseif ($this->startsWith($line, self::T_DOCS)){
            $this->cadBlock = self::T_DOCS;
            //dump($this->cadBlock);
        }
        //start table izdateli
        elseif ($this->startsWith($line, self::T_IZD)){
            $this->cadBlock = self::T_IZD;
            //dump($this->cadBlock);
        }
        //start table mest
        elseif ($this->startsWith($line, self::T_MEST)){
            $this->cadBlock = self::T_MEST;
            //dump($this->cadBlock);
        }//start table imot
        elseif ($this->startsWith($line, self::T_IMOT)){
            $this->cadBlock = self::T_IMOT;
            //dump($this->cadBlock);
        }//start table zapovedi
        elseif($this->startsWith($line, self::T_ZAP)){
            $this->cadBlock = self::T_ZAP;
        }//start table prava
        elseif($this->startsWith($line, self::T_PRAVA)){
            $this->cadBlock = self::T_PRAVA;
        }
    }

    public function addLands(Array $checkedLandsArray, EntityManager $em)
    {
        ini_set('max_execution_time', 0);
        foreach ($checkedLandsArray as $landArray){
            $landEntity = new Lands();
            $landEntity->setNum($landArray[0]);
            $mest = $em->getRepository(Mest::class)->findOneBy(['name'=>$landArray[1]]);
            if($mest == null){
                $mest = new Mest();
                $mest->setName($landArray[1]);
                $landEntity->setMest($mest);
            }else{
                $landEntity->setMest($mest);
            }
            $zem = $em->getRepository(Zem::class)->findOneBy(['name'=>$landArray[2]]);
            if($zem == null){
                $zem = new Zem();
                $zem->setName($landArray[2]);;
                $landEntity->setZem($zem);
            }else{
                $landEntity->setZem($zem);
            }
            $ntp = $em->getRepository(Ntp::class)->findOneBy(['name'=>$landArray[3]]);
            if($ntp == null){
                $ntp = new Ntp();
                $ntp->setName($landArray[3]);
                $landEntity->setNtp($ntp);
            }else{
                $landEntity->setNtp($ntp);
            }
            $kat = $em->getRepository(Kat::class)->findOneBy(['name'=>$landArray[4]]);
            if($kat == null){
                $kat = new Kat();
                $kat->setName($landArray[4]);
                $landEntity->setKat($kat);
            }else{
                $landEntity->setKat($kat);
            }

            $landEntity->setArea($landArray[5]);

            $doc = $em->getRepository(Doc::class)->findOneBy(['name'=>$landArray[6]]);
            if($doc == null){
                $doc = new Doc();
                $doc->setName($landArray[6]);
                $landEntity->setDoc($doc);
            }else{
                $landEntity->setDoc($doc);
            }
            $em->persist($landEntity);
            $em->flush();
            $em->clear();
        }

    }

}